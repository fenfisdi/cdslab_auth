import pyotp
import jsoncfg

from PIL import Image

from dependencies import qr_deps
from models.user import user_to_register
from operations.user_operations import retrieve_user

qr_settings = jsoncfg.load_config('qr.cfg')


def generate_key_qr() -> str:
    """
        Generate random key used to generate QR code for a given email

        Returns
        ----------
        pyotp.random_base32 : str

    """
    return pyotp.random_base32()


def generate_url_qr(qr_key: str, user: user_to_register) -> str:
    """
        Generate url containing unique QR for a given email

        Parameters
        ----------
        qr_key: str
            A str generated by the pyotp library

        user: Pydantic class
            Inherits the properties of user_to_register

        Returns
        ----------
        Method: Url
            Url generated by key_qr and the user's email
    """
    return pyotp.TOTP(qr_key).provisioning_uri(user.email)


def get_value_key_qr(key_qr: str):
    """
        Read the value written by the user after scanning the QR code with
        Google Authenticator

        Parameters
        ----------
        key_qr: str
            Code generated by Google Authenticator

        Returns
        ----------
        value: Url
            Url generated by key_qr and the user's email
    """
    return pyotp.TOTP(key_qr).now()


def validate_qr(query: dict, qr_value: str):
    """
        Validate QR key given a user and a value to compare to

        Parameters
        ----------
        query: dict
            Database search query

        qr_value:str
            Value to compare

        Returns
        ----------
        value: Boolean
    """
    user_retrieve = retrieve_user(query)
    if user_retrieve:
        key_qr_value = qr_deps.get_value_key_qr(user_retrieve["key_qr"])
        if key_qr_value:
            if str(key_qr_value) == str(qr_value):
                return True
            return False
        return False
    return False
