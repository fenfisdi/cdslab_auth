import jsoncfg

from bson.objectid import ObjectId
from db_connection import db

db_config = jsoncfg.load_config('db_config.cfg')

users = db[db_config.collection.users()]

def retrive_user(query: dict) -> dict:
    user = users.find_one(query)
    """
    Takes a dictionary as a parameter to perform a search
    
    Parameters
    ----------
    query: dict
            The key pair associated with the search
    
    Return
    ----------
    user: pymongo object
            The pymongo object generated by the search
    """
    return user

def insert_user(data: dict):
    """
    Takes a dictionary and save it on the mongo collection users

    Parameters
    ----------
    data: dict
            The dict that will be saved on the database as json document

    
    Return
    ----------
    user: dict
            The dict saved in the database
    """
    user = users.insert_one(data)
    new_user = users.find_one({"_id": user.inserted_id})
    return new_user

def update_user_state(data: dict, id:str):
    """
    Takes dictionary with the pair key value and its id associated 
    and change the value to true

    Parameters
    ----------
    data: dict
            The parameter that contains the pair key value 
    id: str
            The id that associated with the document found from data parameter as a query
    
    Return
    ----------
    False:
        If the data doesn't exist
    False: 
        If the Updated wasn't successful
    False:
        If the ObjectId didn't match with the document associated to data parameter
    True:
        If the searched user exist and the updated was successfull 
    """

    if len(data) < 1:
        return False
    user = users.find_one({"_id": ObjectId(id)})
    if user:
        updated_user = users.update_one(
            {"_id": ObjectId(id)}, {"$set": data}
        )
        if updated_user:
            return True
        return False
    return False