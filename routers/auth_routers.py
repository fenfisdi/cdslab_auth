import pyotp

from fastapi import APIRouter
from pprint import pprint

from models import user
from use_cases.auth_cases import (validation_login_auth,
                                  validation_qr_auth,
                                  generate_refresh_token
                                 )

router = APIRouter()

@router.post("/loginAuthentication")
async def login_auth(user: user.auth_in):
    """
        Validate user information at login time

        Parameters
        ----------
        - user: dict
            email associated to the user

        Returns
        ----------
        - response : Method
            - key_qr: str
                Hash to match second authentication factor
            - email:str
                Email associated to the user

        Raises
        ----------
        - HTTPException
            If passwords don't match
        - HTTPException
            If user doesn't exist
    """
    return validation_login_auth(user)


@router.post("/qrAuthentication")
async def qr_auth(user: user.two_auth_in):
    """
        Validate if qr and the user input match the authentication factor and
        generates a token

        Parameters
        ----------
        - email: str
            User email

        - qr_value: int
            Code generated by Google Authenticator
        Returns
        ----------
        - response : str
            Token

        Raises
        ----------
        - HTTPException:
            If token is invalid or email doesn't exist
        - HTTPException:
            If key_qr does't match the expected value
    """
    return validation_qr_auth(user.email, user.qr_value)


@router.post("/refreshAuthentication")
async def refresh_auth(user: user.auth_refresh):
    """
         Generate a new token to keep the user logged in

         Parameters
         ----------
         - email: str
            User email

         - key_qr: str
             String stored in the database
         Returns
         ----------
         - response: str
             token

         Raises
         ----------
         - HTTPException:
             If the token cannot be generated
         - HTTPException:
             If key_qr doesn't match the expected value
     """
    return generate_refresh_token(user.key_qr)
