# TODO: Add HTTPExceptions

from fastapi import APIRouter

from models.user import (PreAuthenticatedUser,
                         AuthenticatedUser)
from use_cases.auth_cases import (validate_user_login,
                                  validate_user_qr)

router_of_authentication = APIRouter()

@router_of_authentication.post("/loginAuthentication")
async def login_auth(pre_authenticated_user: PreAuthenticatedUser):
    """
        Validate user information at login time

        Parameters
        ----------
        - pre_authenticated_user: dict
            email associated to the user

        Returns
        ----------
        - Method
            - key_qr: str
                Hash to match second authentication factor

            - email:str
                Email associated to the user

        Raises
        ----------
        - HTTPException
            If passwords don't match

        - HTTPException
            If user doesn't exist
    """
    return validate_user_login(pre_authenticated_user)


@router_of_authentication.post("/qrAuthentication")
async def qr_auth(authenticated_user: AuthenticatedUser):
    """
        Validate if qr and the user input match the 2FA and
        generates a token

        Parameters
        ----------
        - **email**: str
            User email

        - **qr_value**: int
            Code generated by Google Authenticator

        Returns
        ----------
        - **response**: str
            Token

        Raises
        ----------
        - **HTTPException**:
            If token is invalid or email doesn't exist

        - **HTTPException**:
            If key_qr does't match the expected value
    """
    return validate_user_qr(authenticated_user.email,
                            authenticated_user.qr_value)
