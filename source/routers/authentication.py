# TODO: Add HTTPExceptions

from datetime import datetime, timedelta

from fastapi import APIRouter, status

from source.dependencies.qr_deps import validate_qr
from source.dependencies.responses import response_model, error_response_model
from source.dependencies.token_deps import generate_token_jwt
from source.dependencies.user_deps import verify_password
from source.models.user import PreAuthenticatedUser, AuthenticatedUser
from source.interfaces.user_interface import UserInterface

router_of_authentication = APIRouter()


@router_of_authentication.post("/loginAuthentication", status_code=status.HTTP_200_OK)
async def login_auth(pre_authenticated_user: PreAuthenticatedUser):
    """
        Validate user information at login time

        Parameters
        ----------
        - pre_authenticated_user: dict
            email associated to the user

        Returns
        ----------
        - Method
            - key_qr: str
                Hash to match second authentication factor

            - email:str
                Email associated to the user

        Raises
        ----------
        - HTTPException
            If passwords don't match

        - HTTPException
            If user doesn't exist
    """
    retrieved_user = UserInterface.retrieve_user(
        email=pre_authenticated_user.email
    )

    if retrieved_user:
        is_equal = verify_password(pre_authenticated_user.password,
                                   retrieved_user["hashed_password"])
        if is_equal:
            return response_model({"key_qr": retrieved_user["key_qr"],
                                   "email": retrieved_user["email"]},
                                  "Successful")

        return error_response_model("Invalid Username or Password", status.HTTP_404_NOT_FOUND, "Error")
    return error_response_model("User doesn't exist", status.HTTP_404_NOT_FOUND, "Error")


@router_of_authentication.post("/qrAuthentication")
async def qr_auth(authenticated_user: AuthenticatedUser):
    """
        Validate if qr and the user input match the 2FA and
        generates a token

        Parameters
        ----------
        - **email**: str
            User email

        - **qr_value**: int
            Code generated by Google Authenticator

        Returns
        ----------
        - **response**: str
            Token

        Raises
        ----------
        - **HTTPException**:
            If token is invalid or email doesn't exist

        - **HTTPException**:
            If key_qr does't match the expected value
    """
    is_valid = validate_qr({"email": authenticated_user.email}, authenticated_user.qr_value)
    if is_valid:
        retrieved_user = UserInterface.retrieve_user(email=authenticated_user.email)
        payload = {
            "expires": str(datetime.utcnow() + timedelta(hours=24)),
            "id": str(retrieved_user["_id"]),
            "role": str(retrieved_user["role"]),
            "email": str(retrieved_user["email"]),
        }

        token = generate_token_jwt(payload)
        if token:
            return response_model({'data': token}, "Successful")
        return error_response_model("Error while generating token", status.HTTP_404_NOT_FOUND, "Error")
    return error_response_model("Invalid QR validation", status.HTTP_404_NOT_FOUND, "Error")
