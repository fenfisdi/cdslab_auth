import pyotp

from source.interfaces.user_interface import UserInterface
from source.models.user import BaseUser


def generate_key_qr() -> str:
    """
        Generate random key used to generate QR code for a given email

        Returns
        ----------
        pyotp.random_base32 : str

    """
    return pyotp.random_base32()


def generate_url_qr(qr_key: str, user: BaseUser) -> str:
    """
        Generate url containing unique QR for a given email

        Parameters
        ----------
        qr_key: str
            A str generated by the pyotp library

        user: Pydantic class
            Inherits the properties of BaseUser

        Returns
        ----------
        Method: Url
            Url generated by key_qr and the user's email
    """
    return pyotp.TOTP(qr_key).provisioning_uri(user.email)


def get_value_key_qr(key_qr: str):
    """
        Read the value written by the user after scanning the QR code with
        Google Authenticator

        Parameters
        ----------
        key_qr: str
            Code generated by Google Authenticator

        Returns
        ----------
        value: Url
            Url generated by key_qr and the user's email
    """
    return pyotp.TOTP(key_qr).now()


def validate_qr(query: dict, qr_value: str):
    """
        Validate QR key given a user and a value to compare to

        Parameters
        ----------
        query: dict
            Database search query

        qr_value:str
            Value to compare

        Returns
        ----------
        value: Boolean
    """
    retrieved_user = UserInterface.retrieve_user(query)
    if retrieved_user:
        key_qr_value = get_value_key_qr(retrieved_user["key_qr"])
        if key_qr_value and (str(key_qr_value) == str(qr_value)):
            return True
    return False
