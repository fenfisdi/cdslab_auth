from typing import Tuple, Union

from jose import jwt, JWTError
from pyotp import TOTP, random_base32

from src.config import secrets


class SecurityUseCase:

    @staticmethod
    def encode_token(email: str) -> str:
        data = {
            'email': email,
        }
        return jwt.encode(
            data,
            secrets.get('SECRET_KEY'),
            secrets.get('ALGORITHM')
        )

    @staticmethod
    def decode_token(token: str) -> Tuple[Union[dict, None], bool]:
        """
            Extract data from token and return a key pair

            Parameters
            ----------
            token: str
                A string generated by the email_access_token function

            Returns
            ----------
            decode_email: class applicant_user
                Key pair for the associated email
        """
        try:
            data = jwt.decode(
                token,
                secrets.get('SECRET_KEY'),
                secrets.get('ALGORITHM')
            )
            if not data.get('email'):
                return None, False
            return data, True
        except JWTError:
            return None, False

    @staticmethod
    def create_otp_code():
        return random_base32()

    @staticmethod
    def create_otp_url(otp_code: str, email: str):
        return TOTP(otp_code).provisioning_uri(email)

    @staticmethod
    def transform_otp_code(otp_code: str) -> str:
        return TOTP(otp_code).now()
